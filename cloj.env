# vim: syntax=sh
# Test for an existing clojure env and finish it
if declare -f clojure_teardown > /dev/null; then
  clojure_teardown;
fi

# Set the new clojure ENV root from the path of the sourced script
CLOJURE_ENV="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

function clojure_log() {  echo $'\e[33m'"$@"$'\e[0m';  }
function clojure_warn() {  echo $'\e[31m'"$@"$'\e[0m'; }

# Setup init code and teardown code for later
function clojure_init() {
  local my_bin="${CLOJURE_ENV}/bin";
  local my_lein_home="${CLOJURE_ENV}/lein/home";
  if [[ "$PATH" != *"${my_bin}"* ]]; then
    clojure_log "prepending ${my_bin} to PATH" ;
    export PATH="$my_bin:$PATH";
  fi
  clojure_log "Setting LEIN_HOME to ${my_lein_home}"
  export LEIN_HOME="${my_lein_home}"
}
function clojure_teardown() {
  local my_bin="${CLOJURE_ENV}/bin";
  if [[ "$PATH" == *":${my_bin}"* ]]; then
    clojure_log "removing ${my_bin} from middle of PATH";
    export PATH="${PATH/:"$my_bin":/:}";
  fi
  if [[ "$PATH" == *"${my_bin}"* ]]; then
    clojure_log "removing ${my_bin} from start of PATH";
    export PATH="${PATH/"$my_bin":/:}";
  fi
  clojure_log "Clearing LEIN_HOME"
  unset LEIN_HOME;
}
function clojure_update_lein() {
  local my_bin="${CLOJURE_ENV}/bin";
  local my_lein="${my_bin}/lein";
  if [ ! -e ${my_lein} ]; then
    wget -O "${my_lein}" https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
    chmod u+x "${my_lein}"
    "${my_lein}" version
  else
    "${my_lein}" upgrade
  fi
}

# Setup ENV
clojure_init

# When not sourced, emulate teardown every time.
# this will happen naturally, but if you're invoking it via shell
# you're probably trying to test something, so testing the teardown
# is nice.
if [[ $0 == *"cloj.env" ]]; then
  clojure_warn "WARNING: Ran as bash script, ENV changes will not persist";
  clojure_teardown
fi

#export LEIN_HOME="/home/kent/clojure/LEINHOME/
#export PATH="/home/kent/clojure/bin/:$PATH"
